import streamlit as st
import pandas as pd
import joblib

# @st.cache_data –≥–æ–≤–æ—Ä–∏—Ç Streamlit: "–í—ã–ø–æ–ª–Ω–∏ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –æ–¥–∏–Ω —Ä–∞–∑ –∏ –∑–∞–ø–æ–º–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
@st.cache_data
def load_data():
    data = pd.read_csv('last_satis.csv')
    data = data.drop(columns = 'Unnamed: 0')
    data['Tarix'] = pd.to_datetime(data['Tarix'], unit='D', origin='1899-12-30')
    data['Tarix'] = data['Tarix'].dt.strftime('%Y-%m')
    return data

# @st.cache_resource –≥–æ–≤–æ—Ä–∏—Ç: "–ó–∞–≥—Ä—É–∑–∏ —ç—Ç–æ—Ç —Ä–µ—Å—É—Ä—Å (–º–æ–¥–µ–ª—å) –æ–¥–∏–Ω —Ä–∞–∑ –∏ –¥–µ—Ä–∂–∏ –≤ –ø–∞–º—è—Ç–∏"
@st.cache_resource
def load_model(path):
    with open(path, 'rb') as f:
        model = joblib.load(f)
    return model

try:
    data = load_data()
    model = load_model('regressor_pipeline.joblib')
except FileNotFoundError:
    st.error("Error")
    st.stop() # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞, –µ—Å–ª–∏ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã


st.title('Dashboard and sales prediction üìà')
st.write("---")

st.header("ü§ñ Predict the sale amount")

col1, col2 = st.columns(2)

with col1:
    selected_store = st.selectbox("`Maƒüaza`", options=sorted(data['Maƒüaza'].unique()))
    selected_product_name = st.selectbox("`M…ôhsul_adi`", options=sorted(data['M…ôhsul_adi'].unique()))
    selected_card_id = st.number_input("`Kart_nomresi`", min_value=0, value=1000, step=1)
    
with col2:
    selected_product_id = st.number_input("`M…ôhsul_nomresi`", min_value=0, value=1, step=1)
    selected_quantity = st.number_input("`M…ôhsul sayi`", min_value=1, value=1, step=1)

if st.button('Predict'):
    input_data = pd.DataFrame({
        'Maƒüaza': [selected_store],
        'Kart_nomresi': [selected_card_id],
        'M…ôhsul_nomresi': [selected_product_id],
        'M…ôhsul_adi': [selected_product_name],
        'M…ôhsul sayi': [selected_quantity]
    })
    
    prediction = model.predict(input_data)
    
    st.success(f"Predicted sale amount: ${prediction[0]:.2f}")

st.write("---")

st.header("üìä Analytics")
st.write("### Key business indicators")

total_sales = data['√úmumi satƒ±≈ü'].sum()
total_items_sold = data['M…ôhsul sayi'].sum()
unique_customers = data['Kart_nomresi'].nunique()

m_col1, m_col2, m_col3 = st.columns(3)
m_col1.metric("Total revenue", f"{total_sales:,.0f} $") # revenue - –≤—ã—Ä—É—á–∫–∞
m_col2.metric("Total items sold", f"{total_items_sold:,.0f}")
m_col3.metric("Unique clients", f"{unique_customers:,.0f}")

st.write("### Sales Leaders")

top_5_products = data.groupby('M…ôhsul_adi')['√úmumi satƒ±≈ü'].sum().nlargest(5)
top_5_stores = data.groupby('Maƒüaza')['√úmumi satƒ±≈ü'].sum().nlargest(5)

g_col1, g_col2 = st.columns(2)
with g_col1:
    st.write("Top 5 products by revenue")
    st.bar_chart(top_5_products)
with g_col2:
    st.write("Top 5 stores by revenue")
    st.bar_chart(top_5_stores)

st.write("---") 
st.write("### In-depth product analysis")

selected_product_for_analysis = st.selectbox(
    "Select a product for detailed analysis:",
    options=sorted(data['M…ôhsul_adi'].unique()),
    key='product_analysis_selectbox'
)

st.write(f"#### Detailed product Information: '{selected_product_for_analysis}'")
product_data = data[data['M…ôhsul_adi'] == selected_product_for_analysis]
st.dataframe(product_data)

st.write(f"#### Rating of stores by product sales")
sales_by_store = product_data.groupby('Maƒüaza')['√úmumi satƒ±≈ü'].sum().sort_values(ascending=False)

if not sales_by_store.empty:
    st.bar_chart(sales_by_store)
else:
    st.warning("There is no sales data to display")